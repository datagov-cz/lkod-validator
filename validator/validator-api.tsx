/**
 * Message levels.
 */
export enum Level {
  /**
   * Information or positive validation outcome.
   */
  INFO = 0,
  /**
   * Something that may or may not be a problem.
   */
  WARNING = 1,
  /**
   * A problem.
   */
  ERROR = 2,
  /**
   * A problem that force us to stop validation of curren resource.
   */
  CRITICAL = 3,
}

export enum ResourceType {
  /**
   * URL to validate as provided by the user.
   */
  URL = "URL",
  /**
   * Represent a catalog.
   */
  CATALOG = "CATALOG",
  /**
   * Dataset to validate.
   */
  DATASET = "DATASET",
}

/**
 * Represent a resource for validation.
 */
export class ResourceInValidation {
  url: string;

  type: ResourceType;

  constructor(url: string, type: ResourceType) {
    this.url = url;
    this.type = type;
  }
}

/**
 * Represent a basic validation unit a message.
 */
export interface Message {
  readonly created: Date;

  readonly level: Level;

  readonly validator: string;

  readonly message: string;
}

/**
 * Listener to the process of validation.
 */
export interface ValidationObserver {
  onMessage(message: Message): void;

  onStatus(status:string): void;

  onResourceWillStart(resource: ResourceInValidation): void;

  onResourceDidEnd(resource: ResourceInValidation): void;
}

class ConsoleLogObserver implements ValidationObserver {
  onMessage(message: Message) {
    console.log("onMessage", message);
  }

  onStatus(status:string): void {
    console.log("onStatus", status);
  }

  onResourceWillStart(resource: ResourceInValidation): void {
    console.log("onResourceWillStart", resource);
  }

  onResourceDidEnd(resource: ResourceInValidation): void {
    console.log("onResourceDidEnd", resource);
  }
}

/**
 * Represent a full object generated by validation.
 * The report is build using messaged that a client can listen
 * to using {@link ValidationObserver}.
 */
export class ValidationReporter {
  private readonly observer: ValidationObserver;

  private resources: ResourceInValidation[] = [];

  constructor(observer?: ValidationObserver) {
    this.observer = observer ?? new ConsoleLogObserver();
  }

  private emitMessage(level: Level, validator: string, message: string): void {
    this.observer.onMessage({
      created: new Date(),
      level: level,
      validator: validator,
      message: message,
    });
  }

  info(validator: string, message: string): void {
    this.emitMessage(Level.INFO, validator, message);
  }

  warning(validator: string, message: string): void {
    this.emitMessage(Level.WARNING, validator, message);
  }

  error(validator: string, message: string): void {
    this.emitMessage(Level.ERROR, validator, message);
  }

  /**
   * Throws an exception to terminate validation.
   */
  critical(validator: string, message: string): void {
    this.emitMessage(Level.CRITICAL, validator, message);
  }
  
  updateStatus(status: string) {
    this.observer.onStatus(status);
  }

  beginUrlValidation(url: string) {
    this.openResource(new ResourceInValidation(url, ResourceType.URL));
  }

  private openResource(resource: ResourceInValidation): void {
    this.observer.onResourceWillStart(resource);
    this.resources.push(resource);
  }

  beginCatalogValidation(url: string) {
    this.openResource(new ResourceInValidation(url, ResourceType.CATALOG));
  }

  beginDatasetValidation(url: string) {
    this.openResource(new ResourceInValidation(url, ResourceType.DATASET));
  }

  endResourceValidation() {
    const resource = this.resources.pop();
    this.observer.onResourceDidEnd(resource);
  }
}
